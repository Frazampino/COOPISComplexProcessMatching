import ollama
import os
import xml.etree.ElementTree as ET

def read_bpmn_file(file_path):
    """Legge il contenuto XML di un file BPMN."""
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

def extract_task_names(file_path):
  
    tree = ET.parse(file_path)
    root = tree.getroot()
    ns = {'bpmn': 'http://www.omg.org/spec/BPMN/20100524/MODEL'}

    task_names = []
    for task_type in ['task', 'userTask', 'manualTask', 'serviceTask', 'scriptTask', 'businessRuleTask', 'sendTask', 'receiveTask', 'callActivity']:
        for task in root.findall(f".//bpmn:{task_type}", ns):
            name = task.attrib.get('name')
            if name:
                task_names.append(name)
    return task_names

def compare_bpmn_files(file1_path, file2_path):
    """Confronta due modelli BPMN e stampa il risultato."""
    name_1 = os.path.basename(file1_path)
    name_2 = os.path.basename(file2_path)

    content1 = read_bpmn_file(file1_path)
    content2 = read_bpmn_file(file2_path)
    tasks1 = extract_task_names(file1_path)
    tasks2 = extract_task_names(file2_path)

    prompt = f"""You are comparing two BPMN models. Here are their task names extracted from the BPMN files:

Model 1 ({name_1}) task list:
{chr(10).join(tasks1)}

Model 2 ({name_2}) task list:
{chr(10).join(tasks2)}

Now, follow these steps:

1. Provide a similarity score between 0 and 1 and explain briefly.
2. Match tasks with similar or equivalent meaning (1:1 mappings) and explain.
3. Identify 1:N mappings (single task to multiple tasks in the other model). Example:
"Approve Order" → ["Check Order", "Confirm Order"]
4. Identify N:M mappings (group of tasks to another group). Example:
["Validate Data", "Clean Data"] → ["Preprocess", "Transform"]
5. Explicitly say "No 1:N mappings found." or "No N:M mappings found." if not found.
6. Provide the flattened list of mappings as:
"Task A" → "Task B"
"Task A" → "Task B1"
["Task A1", "Task A2"] → ["Task B1", "Task B2"]
"""

    response = ollama.chat(model='llama3', messages=[{'role': 'user', 'content': prompt}])
    
    
    print(f"\n=== Comparison: {name_1} vs {name_2} ===\n")
    print(response['message']['content'])
    print("\n" + "="*80 + "\n")

def batch_compare_bpmn_pairs(bpmn_pairs):
    """Confronta una lista di coppie di file BPMN."""
    for file1, file2 in bpmn_pairs:
        try:
            compare_bpmn_files(file1, file2)
        except FileNotFoundError as e:
            print(f"File non trovato: {e}")


bpmn_file_pairs = [
    ('TU_Munich.bpmn', 'TU_Munich - Copia.bpmn')
]
batch_compare_bpmn_pairs(bpmn_file_pairs)
